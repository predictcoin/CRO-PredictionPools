/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IPrediction {
  export type BetInfoStruct = {
    position: BigNumberish;
    token: string;
    amount: BigNumberish;
    claimed: boolean;
  };

  export type BetInfoStructOutput = [number, string, BigNumber, boolean] & {
    position: number;
    token: string;
    amount: BigNumber;
    claimed: boolean;
  };
}

export interface IPredictionInterface extends utils.Interface {
  contractName: "IPrediction";
  functions: {
    "addTokens(address[],address[])": FunctionFragment;
    "claim(uint256[])": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "endRound()": FunctionFragment;
    "getRound(uint256)": FunctionFragment;
    "getTokens()": FunctionFragment;
    "getUserRounds(address,uint256,uint256)": FunctionFragment;
    "getUserRoundsLength(address)": FunctionFragment;
    "ledger(uint256,address)": FunctionFragment;
    "lostRound(address,uint256)": FunctionFragment;
    "predictBear(uint256,address)": FunctionFragment;
    "predictBull(uint256,address)": FunctionFragment;
    "refundable(uint256,address)": FunctionFragment;
    "removeTokens(uint256[])": FunctionFragment;
    "startRound()": FunctionFragment;
    "wonRound(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTokens",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endRound", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserRounds",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoundsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ledger",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lostRound",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "predictBear",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "predictBull",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "refundable",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokens",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "startRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wonRound",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoundsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lostRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictBear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictBull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wonRound", data: BytesLike): Result;

  events: {};
}

export interface IPrediction extends BaseContract {
  contractName: "IPrediction";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPredictionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTokens(
      _tokens: string[],
      _oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        epoch: BigNumber;
        lockedTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        totalAmount: BigNumber;
        oraclesCalled: boolean;
        _tokens: string[];
        lockedPrices: BigNumber[];
        closePrices: BigNumber[];
        lockedOracleIds: BigNumber[];
        closeOracleIds: BigNumber[];
        bets: BigNumber[];
      }
    >;

    getTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], IPrediction.BetInfoStructOutput[], BigNumber]>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    ledger(
      round: BigNumberish,
      preder: string,
      overrides?: CallOverrides
    ): Promise<[IPrediction.BetInfoStructOutput]>;

    lostRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    predictBear(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    predictBull(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeTokens(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wonRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addTokens(
    _tokens: string[],
    _oracles: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    epochs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRound(
    _round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[]
    ] & {
      epoch: BigNumber;
      lockedTimestamp: BigNumber;
      closeTimestamp: BigNumber;
      totalAmount: BigNumber;
      oraclesCalled: boolean;
      _tokens: string[];
      lockedPrices: BigNumber[];
      closePrices: BigNumber[];
      lockedOracleIds: BigNumber[];
      closeOracleIds: BigNumber[];
      bets: BigNumber[];
    }
  >;

  getTokens(overrides?: CallOverrides): Promise<string[]>;

  getUserRounds(
    user: string,
    cursor: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], IPrediction.BetInfoStructOutput[], BigNumber]>;

  getUserRoundsLength(user: string, overrides?: CallOverrides): Promise<void>;

  ledger(
    round: BigNumberish,
    preder: string,
    overrides?: CallOverrides
  ): Promise<IPrediction.BetInfoStructOutput>;

  lostRound(
    preder: string,
    round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  predictBear(
    epoch: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  predictBull(
    epoch: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refundable(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeTokens(
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wonRound(
    preder: string,
    round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addTokens(
      _tokens: string[],
      _oracles: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(epochs: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    endRound(overrides?: CallOverrides): Promise<void>;

    getRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        epoch: BigNumber;
        lockedTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        totalAmount: BigNumber;
        oraclesCalled: boolean;
        _tokens: string[];
        lockedPrices: BigNumber[];
        closePrices: BigNumber[];
        lockedOracleIds: BigNumber[];
        closeOracleIds: BigNumber[];
        bets: BigNumber[];
      }
    >;

    getTokens(overrides?: CallOverrides): Promise<string[]>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], IPrediction.BetInfoStructOutput[], BigNumber]>;

    getUserRoundsLength(user: string, overrides?: CallOverrides): Promise<void>;

    ledger(
      round: BigNumberish,
      preder: string,
      overrides?: CallOverrides
    ): Promise<IPrediction.BetInfoStructOutput>;

    lostRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    predictBear(
      epoch: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    predictBull(
      epoch: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeTokens(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    startRound(overrides?: CallOverrides): Promise<void>;

    wonRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addTokens(
      _tokens: string[],
      _oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ledger(
      round: BigNumberish,
      preder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lostRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    predictBear(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    predictBull(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTokens(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wonRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTokens(
      _tokens: string[],
      _oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRound(
      _round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ledger(
      round: BigNumberish,
      preder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lostRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    predictBear(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    predictBull(
      epoch: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeTokens(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wonRound(
      preder: string,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
