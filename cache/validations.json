{
  "version": "3.2",
  "log": [
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:30",
        "version": {
          "withMetadata": "603dfa020e37b26ac4781d9ace8a4845d7e726a8b0de033d9654c1cedaf228b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)2471_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)2471_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)2471_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "9fd5c012913482a4c7572fa5150d2e409592841746bf7a9877aafac14990da0f",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "cf12f4c6eb90cc8cd40bff717d660fa4657bda5f1124651818b894f0e5f98004",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "060449c202141abfa2cc3189b4cbdf603f6ebabec45fd09f78b0e879c04d4561",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:20",
        "version": {
          "withMetadata": "42041ffd032252744eafbf58233d8bcf922cd8f0a0a8e34f76a32afaeff4122e",
          "withoutMetadata": "c00eef9e0a077f8be6acc3fa9d825333510cae269290a66f905016d83cabdbbb",
          "linkedWithoutMetadata": "c00eef9e0a077f8be6acc3fa9d825333510cae269290a66f905016d83cabdbbb"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingRewardToken(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "CRP",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/LoserPredictionPool.sol:51"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardToken",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/LoserPredictionPool.sol:53"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(Prediction)7277",
              "src": "contracts/LoserPredictionPool.sol:55"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardTokenPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:57"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:59"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7497",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:62"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4122_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:65"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4111_storage))",
              "src": "contracts/LoserPredictionPool.sol:67"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:69"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:71"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:73"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/LoserPredictionPool.sol:75"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_contract(Prediction)7277": {
              "label": "contract Prediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7497": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)4122_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)4122_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardTokenPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4111_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4111_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)4111_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:19",
        "version": {
          "withMetadata": "6f8e44502d0056ff4b8b9c1203b5c59ecb7e38682606f00dff3b945c66061164",
          "withoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e",
          "linkedWithoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[])",
          "removeTokens(uint256[],address[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound(address[],int256[])",
          "endRound(address[],int256[])",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "crp",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/Prediction.sol:28"
            },
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:31"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:32"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:34"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:35"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:36"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:38"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:39"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:40"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:42"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5319_storage))",
              "src": "contracts/Prediction.sol:46"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)5309_storage)",
              "src": "contracts/Prediction.sol:47"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:48"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_struct(AddressSet)2164_storage",
              "src": "contracts/Prediction.sol:50"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5319_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)5319_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)5319_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)5278"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)5278": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)5309_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)5309_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_struct(AddressSet)2164_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1863_storage"
                }
              ]
            },
            "t_struct(Set)1863_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "38ee885a30d137c7b07dfa77a836e7c239cd05848bf6b5949f9921a4e6741bf4",
          "withoutMetadata": "af87873c0eed0fa8743fcc37a42c46d309be3b40dcd1ab20e027f9ccd1e04f5e",
          "linkedWithoutMetadata": "af87873c0eed0fa8743fcc37a42c46d309be3b40dcd1ab20e027f9ccd1e04f5e"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safeCRPTransfer(address,uint256)",
          "safeCROTransfer(address,uint256)",
          "safeTokenTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "CRP",
              "type": "t_contract(IBEP20)8706",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)8706": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CRP": {
        "src": "contracts/Tokens.sol:7",
        "version": {
          "withMetadata": "ead88412db408301ae2d9dac7cf51db81124f6fb71dac876fc9421ce0e79848b",
          "withoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18",
          "linkedWithoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CRP",
            "src": "contracts/Tokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MFF": {
        "src": "contracts/Tokens.sol:13",
        "version": {
          "withMetadata": "776341aecdb9608a4423addd9d15ed1517289f910b5bafee0f274f971b917a53",
          "withoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d",
          "linkedWithoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MFF",
            "src": "contracts/Tokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:18",
        "version": {
          "withMetadata": "e1a495c59e9b87af7582d4211a75b98e7078c1472fbbd63467ab74baeb2724bd",
          "withoutMetadata": "1ed90481a80ec9609fc303e54057c2c36461061cecb1a2d7177543befa879b56",
          "linkedWithoutMetadata": "1ed90481a80ec9609fc303e54057c2c36461061cecb1a2d7177543befa879b56"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingCRP(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "CRP",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/WinnerPredictionPool.sol:49"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(Prediction)7277",
              "src": "contracts/WinnerPredictionPool.sol:51"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "CRPPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:53"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:55"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7497",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:58"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7573_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:61"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7562_storage))",
              "src": "contracts/WinnerPredictionPool.sol:63"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:65"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:67"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:69"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/WinnerPredictionPool.sol:71"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_contract(Prediction)7277": {
              "label": "contract Prediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7497": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7573_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7573_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accCRPPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7562_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7562_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7562_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "1715adc038d9cc729f29eee02b8c2dfb6a4e5405c8dfccecd929830b53de6d20",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "892fe8cedab8b23b53a7317be898f57590f6a6e8ac867decf525f2d15dcaf3d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:30",
        "version": {
          "withMetadata": "603dfa020e37b26ac4781d9ace8a4845d7e726a8b0de033d9654c1cedaf228b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)2471_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)2471_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)2471_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "9fd5c012913482a4c7572fa5150d2e409592841746bf7a9877aafac14990da0f",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "cf12f4c6eb90cc8cd40bff717d660fa4657bda5f1124651818b894f0e5f98004",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "060449c202141abfa2cc3189b4cbdf603f6ebabec45fd09f78b0e879c04d4561",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f19914d1858410a6b1ad6138dfb5b0d987af13bf7b3fa3d8d743981e230c206e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:20",
        "version": {
          "withMetadata": "42041ffd032252744eafbf58233d8bcf922cd8f0a0a8e34f76a32afaeff4122e",
          "withoutMetadata": "c00eef9e0a077f8be6acc3fa9d825333510cae269290a66f905016d83cabdbbb",
          "linkedWithoutMetadata": "c00eef9e0a077f8be6acc3fa9d825333510cae269290a66f905016d83cabdbbb"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingRewardToken(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "CRP",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/LoserPredictionPool.sol:51"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardToken",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/LoserPredictionPool.sol:53"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(Prediction)7589",
              "src": "contracts/LoserPredictionPool.sol:55"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardTokenPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:57"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:59"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7809",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:62"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4434_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:65"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4423_storage))",
              "src": "contracts/LoserPredictionPool.sol:67"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:69"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:71"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:73"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/LoserPredictionPool.sol:75"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_contract(Prediction)7589": {
              "label": "contract Prediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7809": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)4434_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)4434_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardTokenPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4423_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4423_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)4423_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:19",
        "version": {
          "withMetadata": "6f8e44502d0056ff4b8b9c1203b5c59ecb7e38682606f00dff3b945c66061164",
          "withoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e",
          "linkedWithoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[])",
          "removeTokens(uint256[],address[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound(address[],int256[])",
          "endRound(address[],int256[])",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "crp",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/Prediction.sol:28"
            },
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:31"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:32"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:34"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:35"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:36"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:38"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:39"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:40"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:42"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5631_storage))",
              "src": "contracts/Prediction.sol:46"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)5621_storage)",
              "src": "contracts/Prediction.sol:47"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:48"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_struct(AddressSet)2164_storage",
              "src": "contracts/Prediction.sol:50"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5631_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)5631_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)5631_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)5590"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)5590": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)5621_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)5621_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_struct(AddressSet)2164_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1863_storage"
                }
              ]
            },
            "t_struct(Set)1863_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "38ee885a30d137c7b07dfa77a836e7c239cd05848bf6b5949f9921a4e6741bf4",
          "withoutMetadata": "af87873c0eed0fa8743fcc37a42c46d309be3b40dcd1ab20e027f9ccd1e04f5e",
          "linkedWithoutMetadata": "af87873c0eed0fa8743fcc37a42c46d309be3b40dcd1ab20e027f9ccd1e04f5e"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safeCRPTransfer(address,uint256)",
          "safeCROTransfer(address,uint256)",
          "safeTokenTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "CRP",
              "type": "t_contract(IBEP20)9017",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)9017": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CRP": {
        "src": "contracts/Tokens.sol:7",
        "version": {
          "withMetadata": "ead88412db408301ae2d9dac7cf51db81124f6fb71dac876fc9421ce0e79848b",
          "withoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18",
          "linkedWithoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CRP",
            "src": "contracts/Tokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MFF": {
        "src": "contracts/Tokens.sol:13",
        "version": {
          "withMetadata": "776341aecdb9608a4423addd9d15ed1517289f910b5bafee0f274f971b917a53",
          "withoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d",
          "linkedWithoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MFF",
            "src": "contracts/Tokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:17",
        "version": {
          "withMetadata": "7a8b777f43e1130c67ed2f08f3a15cd752d5a50f614189e28749314fcc13ad3b",
          "withoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1",
          "linkedWithoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingCRP(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "CRP",
              "type": "t_contract(IBEP20)9017",
              "src": "contracts/WinnerPredictionPool.sol:48"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)9262",
              "src": "contracts/WinnerPredictionPool.sol:50"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "CRPPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:52"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:54"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7809",
              "src": "contracts/WinnerPredictionPool.sol:56"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7884_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:60"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7873_storage))",
              "src": "contracts/WinnerPredictionPool.sol:62"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:64"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:66"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:68"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/WinnerPredictionPool.sol:70"
            }
          ],
          "types": {
            "t_contract(IBEP20)9017": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)9262": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7809": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7884_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7884_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accCRPPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7873_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7873_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7873_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "1715adc038d9cc729f29eee02b8c2dfb6a4e5405c8dfccecd929830b53de6d20",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "892fe8cedab8b23b53a7317be898f57590f6a6e8ac867decf525f2d15dcaf3d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:30",
        "version": {
          "withMetadata": "603dfa020e37b26ac4781d9ace8a4845d7e726a8b0de033d9654c1cedaf228b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)2471_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)2471_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)2471_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "9fd5c012913482a4c7572fa5150d2e409592841746bf7a9877aafac14990da0f",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "cf12f4c6eb90cc8cd40bff717d660fa4657bda5f1124651818b894f0e5f98004",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "060449c202141abfa2cc3189b4cbdf603f6ebabec45fd09f78b0e879c04d4561",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f19914d1858410a6b1ad6138dfb5b0d987af13bf7b3fa3d8d743981e230c206e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:20",
        "version": {
          "withMetadata": "c82e53b475b9b657d7a479e09d03105ee63312dd562f819159902868e4dd9d8a",
          "withoutMetadata": "c00eef9e0a077f8be6acc3fa9d825333510cae269290a66f905016d83cabdbbb",
          "linkedWithoutMetadata": "c00eef9e0a077f8be6acc3fa9d825333510cae269290a66f905016d83cabdbbb"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingRewardToken(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "CRP",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/LoserPredictionPool.sol:51"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardToken",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/LoserPredictionPool.sol:53"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(Prediction)7589",
              "src": "contracts/LoserPredictionPool.sol:55"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardTokenPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:57"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:59"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7809",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:62"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4434_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:65"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4423_storage))",
              "src": "contracts/LoserPredictionPool.sol:67"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:69"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:71"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:73"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/LoserPredictionPool.sol:75"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_contract(Prediction)7589": {
              "label": "contract Prediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7809": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)4434_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)4434_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardTokenPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4423_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4423_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)4423_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:19",
        "version": {
          "withMetadata": "6f8e44502d0056ff4b8b9c1203b5c59ecb7e38682606f00dff3b945c66061164",
          "withoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e",
          "linkedWithoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[])",
          "removeTokens(uint256[],address[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound(address[],int256[])",
          "endRound(address[],int256[])",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "crp",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/Prediction.sol:28"
            },
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:31"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:32"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:34"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:35"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:36"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:38"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:39"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:40"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:42"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5631_storage))",
              "src": "contracts/Prediction.sol:46"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)5621_storage)",
              "src": "contracts/Prediction.sol:47"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:48"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_struct(AddressSet)2164_storage",
              "src": "contracts/Prediction.sol:50"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5631_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)5631_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)5631_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)5590"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)5590": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)5621_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)5621_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_struct(AddressSet)2164_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1863_storage"
                }
              ]
            },
            "t_struct(Set)1863_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "d1ccdad73408d500f6781bdf50adbe63f20bd1155dd5b36798a14a7412c79b46",
          "withoutMetadata": "da7258b76de2000df50d63e54f103cfaabf493d5da1df3eb3c06a93b5c0dd576",
          "linkedWithoutMetadata": "da7258b76de2000df50d63e54f103cfaabf493d5da1df3eb3c06a93b5c0dd576"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safeCRPTransfer(address,uint256)",
          "safeCROTransfer(address,uint256)",
          "safeTokenTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "CRP",
              "type": "t_contract(IBEP20)9017",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)9017": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CRP": {
        "src": "contracts/Tokens.sol:7",
        "version": {
          "withMetadata": "ead88412db408301ae2d9dac7cf51db81124f6fb71dac876fc9421ce0e79848b",
          "withoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18",
          "linkedWithoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CRP",
            "src": "contracts/Tokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MFF": {
        "src": "contracts/Tokens.sol:13",
        "version": {
          "withMetadata": "776341aecdb9608a4423addd9d15ed1517289f910b5bafee0f274f971b917a53",
          "withoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d",
          "linkedWithoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MFF",
            "src": "contracts/Tokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:17",
        "version": {
          "withMetadata": "ba26ad8964fd025a117c98d3324810d602ba2394595a3a38af318fceb702f95b",
          "withoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1",
          "linkedWithoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingCRP(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "CRP",
              "type": "t_contract(IBEP20)9017",
              "src": "contracts/WinnerPredictionPool.sol:48"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)9262",
              "src": "contracts/WinnerPredictionPool.sol:50"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "CRPPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:52"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:54"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7809",
              "src": "contracts/WinnerPredictionPool.sol:56"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7884_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:60"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7873_storage))",
              "src": "contracts/WinnerPredictionPool.sol:62"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:64"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:66"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:68"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/WinnerPredictionPool.sol:70"
            }
          ],
          "types": {
            "t_contract(IBEP20)9017": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)9262": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7809": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7884_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7884_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accCRPPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7873_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7873_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7873_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "1715adc038d9cc729f29eee02b8c2dfb6a4e5405c8dfccecd929830b53de6d20",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "892fe8cedab8b23b53a7317be898f57590f6a6e8ac867decf525f2d15dcaf3d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:16",
        "version": {
          "withMetadata": "03efcc1321bef1d419e2a45862c9f010edd4a4ca5081c2335696d8ba226d202b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:30",
        "version": {
          "withMetadata": "603dfa020e37b26ac4781d9ace8a4845d7e726a8b0de033d9654c1cedaf228b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)2471_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)2471_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)2471_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "9fd5c012913482a4c7572fa5150d2e409592841746bf7a9877aafac14990da0f",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "cf12f4c6eb90cc8cd40bff717d660fa4657bda5f1124651818b894f0e5f98004",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "060449c202141abfa2cc3189b4cbdf603f6ebabec45fd09f78b0e879c04d4561",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f19914d1858410a6b1ad6138dfb5b0d987af13bf7b3fa3d8d743981e230c206e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:20",
        "version": {
          "withMetadata": "e022f7b54f240df5f549c4c7f79650b25e008431ec2fc87afb2e755b856a5e32",
          "withoutMetadata": "ec421c2db88ef816af94e709d7b6e36809f19988fc50474088ff21be01424236",
          "linkedWithoutMetadata": "ec421c2db88ef816af94e709d7b6e36809f19988fc50474088ff21be01424236"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingRewardToken(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "CRP",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/LoserPredictionPool.sol:51"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardToken",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/LoserPredictionPool.sol:53"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)9262",
              "src": "contracts/LoserPredictionPool.sol:55"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardTokenPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:57"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:59"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7809",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:62"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4434_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:65"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4423_storage))",
              "src": "contracts/LoserPredictionPool.sol:67"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:69"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:71"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:73"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/LoserPredictionPool.sol:75"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_contract(IPrediction)9262": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7809": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)4434_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)4434_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardTokenPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4423_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4423_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)4423_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:19",
        "version": {
          "withMetadata": "6f8e44502d0056ff4b8b9c1203b5c59ecb7e38682606f00dff3b945c66061164",
          "withoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e",
          "linkedWithoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[])",
          "removeTokens(uint256[],address[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound(address[],int256[])",
          "endRound(address[],int256[])",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "crp",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/Prediction.sol:28"
            },
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:31"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:32"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:34"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:35"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:36"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:38"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:39"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:40"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:42"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5631_storage))",
              "src": "contracts/Prediction.sol:46"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)5621_storage)",
              "src": "contracts/Prediction.sol:47"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:48"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_struct(AddressSet)2164_storage",
              "src": "contracts/Prediction.sol:50"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5631_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)5631_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)5631_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)5590"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)5590": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)5621_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)5621_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_struct(AddressSet)2164_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1863_storage"
                }
              ]
            },
            "t_struct(Set)1863_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "d1ccdad73408d500f6781bdf50adbe63f20bd1155dd5b36798a14a7412c79b46",
          "withoutMetadata": "da7258b76de2000df50d63e54f103cfaabf493d5da1df3eb3c06a93b5c0dd576",
          "linkedWithoutMetadata": "da7258b76de2000df50d63e54f103cfaabf493d5da1df3eb3c06a93b5c0dd576"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safeCRPTransfer(address,uint256)",
          "safeCROTransfer(address,uint256)",
          "safeTokenTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "CRP",
              "type": "t_contract(IBEP20)9017",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)9017": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CRP": {
        "src": "contracts/Tokens.sol:7",
        "version": {
          "withMetadata": "ead88412db408301ae2d9dac7cf51db81124f6fb71dac876fc9421ce0e79848b",
          "withoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18",
          "linkedWithoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CRP",
            "src": "contracts/Tokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MFF": {
        "src": "contracts/Tokens.sol:13",
        "version": {
          "withMetadata": "776341aecdb9608a4423addd9d15ed1517289f910b5bafee0f274f971b917a53",
          "withoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d",
          "linkedWithoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MFF",
            "src": "contracts/Tokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:17",
        "version": {
          "withMetadata": "ba26ad8964fd025a117c98d3324810d602ba2394595a3a38af318fceb702f95b",
          "withoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1",
          "linkedWithoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingCRP(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "CRP",
              "type": "t_contract(IBEP20)9017",
              "src": "contracts/WinnerPredictionPool.sol:48"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)9262",
              "src": "contracts/WinnerPredictionPool.sol:50"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "CRPPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:52"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:54"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7809",
              "src": "contracts/WinnerPredictionPool.sol:56"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7884_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:60"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7873_storage))",
              "src": "contracts/WinnerPredictionPool.sol:62"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:64"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:66"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:68"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/WinnerPredictionPool.sol:70"
            }
          ],
          "types": {
            "t_contract(IBEP20)9017": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)9262": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7809": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7884_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7884_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accCRPPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7873_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7873_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7873_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "1715adc038d9cc729f29eee02b8c2dfb6a4e5405c8dfccecd929830b53de6d20",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "892fe8cedab8b23b53a7317be898f57590f6a6e8ac867decf525f2d15dcaf3d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:30",
        "version": {
          "withMetadata": "603dfa020e37b26ac4781d9ace8a4845d7e726a8b0de033d9654c1cedaf228b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)2159_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)2159_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)2159_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "9fd5c012913482a4c7572fa5150d2e409592841746bf7a9877aafac14990da0f",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "cf12f4c6eb90cc8cd40bff717d660fa4657bda5f1124651818b894f0e5f98004",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "060449c202141abfa2cc3189b4cbdf603f6ebabec45fd09f78b0e879c04d4561",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f19914d1858410a6b1ad6138dfb5b0d987af13bf7b3fa3d8d743981e230c206e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:19",
        "version": {
          "withMetadata": "ce77a4555cb8fb88e6ffe65233840ed7ccfe0f97c19b51405217733adefff8c8",
          "withoutMetadata": "ec421c2db88ef816af94e709d7b6e36809f19988fc50474088ff21be01424236",
          "linkedWithoutMetadata": "ec421c2db88ef816af94e709d7b6e36809f19988fc50474088ff21be01424236"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingRewardToken(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "CRP",
              "type": "t_contract(IBEP20)8698",
              "src": "contracts/LoserPredictionPool.sol:50"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardToken",
              "type": "t_contract(IBEP20)8698",
              "src": "contracts/LoserPredictionPool.sol:52"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8943",
              "src": "contracts/LoserPredictionPool.sol:54"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardTokenPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:56"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:58"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7490",
              "src": "contracts/LoserPredictionPool.sol:60"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4121_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:64"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4110_storage))",
              "src": "contracts/LoserPredictionPool.sol:66"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:68"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:70"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:72"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/LoserPredictionPool.sol:74"
            }
          ],
          "types": {
            "t_contract(IBEP20)8698": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8943": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7490": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)4121_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)4121_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardTokenPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4110_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4110_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)4110_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:19",
        "version": {
          "withMetadata": "6f8e44502d0056ff4b8b9c1203b5c59ecb7e38682606f00dff3b945c66061164",
          "withoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e",
          "linkedWithoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[])",
          "removeTokens(uint256[],address[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound(address[],int256[])",
          "endRound(address[],int256[])",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "crp",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/Prediction.sol:28"
            },
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:31"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:32"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:34"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:35"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:36"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:38"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:39"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:40"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:42"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5315_storage))",
              "src": "contracts/Prediction.sol:46"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)5305_storage)",
              "src": "contracts/Prediction.sol:47"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:48"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_struct(AddressSet)1852_storage",
              "src": "contracts/Prediction.sol:50"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5315_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)5315_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)5315_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)5274"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)5274": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)5305_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)5305_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_struct(AddressSet)1852_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1551_storage"
                }
              ]
            },
            "t_struct(Set)1551_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "4e4fd4d13103f2803542008c8a5f5f058d5da1953f3a31ef6f83394ce7fb87f6",
          "withoutMetadata": "bec36d2d3d32e94678d0ddd4ab913ab4fcb6c0d0d64b651ffb81cd5c72c75a2e",
          "linkedWithoutMetadata": "bec36d2d3d32e94678d0ddd4ab913ab4fcb6c0d0d64b651ffb81cd5c72c75a2e"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safeCRPTransfer(address,uint256)",
          "safeCROTransfer(address,uint256)",
          "safeTokenTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "CRP",
              "type": "t_contract(IBEP20)8698",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)8698": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CRP": {
        "src": "contracts/Tokens.sol:7",
        "version": {
          "withMetadata": "ead88412db408301ae2d9dac7cf51db81124f6fb71dac876fc9421ce0e79848b",
          "withoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18",
          "linkedWithoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CRP",
            "src": "contracts/Tokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MFF": {
        "src": "contracts/Tokens.sol:13",
        "version": {
          "withMetadata": "776341aecdb9608a4423addd9d15ed1517289f910b5bafee0f274f971b917a53",
          "withoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d",
          "linkedWithoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MFF",
            "src": "contracts/Tokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:17",
        "version": {
          "withMetadata": "4ca16ef0f12dc12f4817acc0f576f9119b20f63098524514ca2829278aef4dcc",
          "withoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1",
          "linkedWithoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingCRP(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "CRP",
              "type": "t_contract(IBEP20)8698",
              "src": "contracts/WinnerPredictionPool.sol:48"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8943",
              "src": "contracts/WinnerPredictionPool.sol:50"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "CRPPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:52"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:54"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7490",
              "src": "contracts/WinnerPredictionPool.sol:56"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7565_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:60"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7554_storage))",
              "src": "contracts/WinnerPredictionPool.sol:62"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:64"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:66"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:68"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/WinnerPredictionPool.sol:70"
            }
          ],
          "types": {
            "t_contract(IBEP20)8698": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8943": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7490": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7565_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7565_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accCRPPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7554_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7554_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7554_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "1715adc038d9cc729f29eee02b8c2dfb6a4e5405c8dfccecd929830b53de6d20",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "892fe8cedab8b23b53a7317be898f57590f6a6e8ac867decf525f2d15dcaf3d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:30",
        "version": {
          "withMetadata": "603dfa020e37b26ac4781d9ace8a4845d7e726a8b0de033d9654c1cedaf228b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)2159_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)2159_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)2159_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "9fd5c012913482a4c7572fa5150d2e409592841746bf7a9877aafac14990da0f",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "060449c202141abfa2cc3189b4cbdf603f6ebabec45fd09f78b0e879c04d4561",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f19914d1858410a6b1ad6138dfb5b0d987af13bf7b3fa3d8d743981e230c206e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:19",
        "version": {
          "withMetadata": "ef463674464ac450f7754f3412f034adfc5c1cabe9e5d00bfa349b17685ecc0b",
          "withoutMetadata": "ec421c2db88ef816af94e709d7b6e36809f19988fc50474088ff21be01424236",
          "linkedWithoutMetadata": "ec421c2db88ef816af94e709d7b6e36809f19988fc50474088ff21be01424236"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingRewardToken(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "CRP",
              "type": "t_contract(IBEP20)8401",
              "src": "contracts/LoserPredictionPool.sol:50"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardToken",
              "type": "t_contract(IBEP20)8401",
              "src": "contracts/LoserPredictionPool.sol:52"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8646",
              "src": "contracts/LoserPredictionPool.sol:54"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardTokenPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:56"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:58"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7193",
              "src": "contracts/LoserPredictionPool.sol:60"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3824_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:64"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3813_storage))",
              "src": "contracts/LoserPredictionPool.sol:66"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:68"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:70"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:72"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/LoserPredictionPool.sol:74"
            }
          ],
          "types": {
            "t_contract(IBEP20)8401": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8646": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7193": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)3824_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)3824_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardTokenPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3813_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3813_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)3813_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:19",
        "version": {
          "withMetadata": "6f8e44502d0056ff4b8b9c1203b5c59ecb7e38682606f00dff3b945c66061164",
          "withoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e",
          "linkedWithoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[])",
          "removeTokens(uint256[],address[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound(address[],int256[])",
          "endRound(address[],int256[])",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "crp",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/Prediction.sol:28"
            },
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:31"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:32"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:34"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:35"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:36"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:38"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:39"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:40"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:42"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5018_storage))",
              "src": "contracts/Prediction.sol:46"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)5008_storage)",
              "src": "contracts/Prediction.sol:47"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:48"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_struct(AddressSet)1852_storage",
              "src": "contracts/Prediction.sol:50"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5018_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)5018_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)5018_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)4977"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)4977": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)5008_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)5008_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_struct(AddressSet)1852_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1551_storage"
                }
              ]
            },
            "t_struct(Set)1551_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "01bd4b8a75554b62bd3ad71df011c46643e7735e0a8b481714aa4ad36e5461a1",
          "withoutMetadata": "bec36d2d3d32e94678d0ddd4ab913ab4fcb6c0d0d64b651ffb81cd5c72c75a2e",
          "linkedWithoutMetadata": "bec36d2d3d32e94678d0ddd4ab913ab4fcb6c0d0d64b651ffb81cd5c72c75a2e"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safeCRPTransfer(address,uint256)",
          "safeCROTransfer(address,uint256)",
          "safeTokenTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "CRP",
              "type": "t_contract(IBEP20)8401",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)8401": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CRP": {
        "src": "contracts/Tokens.sol:7",
        "version": {
          "withMetadata": "ead88412db408301ae2d9dac7cf51db81124f6fb71dac876fc9421ce0e79848b",
          "withoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18",
          "linkedWithoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CRP",
            "src": "contracts/Tokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MFF": {
        "src": "contracts/Tokens.sol:13",
        "version": {
          "withMetadata": "776341aecdb9608a4423addd9d15ed1517289f910b5bafee0f274f971b917a53",
          "withoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d",
          "linkedWithoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MFF",
            "src": "contracts/Tokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:17",
        "version": {
          "withMetadata": "64575453576994a8bde16e28562af79f38cf6279f9f58b129abbcd608e38a1b8",
          "withoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1",
          "linkedWithoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingCRP(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "CRP",
              "type": "t_contract(IBEP20)8401",
              "src": "contracts/WinnerPredictionPool.sol:48"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8646",
              "src": "contracts/WinnerPredictionPool.sol:50"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "CRPPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:52"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:54"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7193",
              "src": "contracts/WinnerPredictionPool.sol:56"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7268_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:60"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7257_storage))",
              "src": "contracts/WinnerPredictionPool.sol:62"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:64"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:66"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:68"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/WinnerPredictionPool.sol:70"
            }
          ],
          "types": {
            "t_contract(IBEP20)8401": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8646": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7193": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7268_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7268_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accCRPPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7257_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7257_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7257_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "7e050bd1b4fad223bbb5e89b320a51985130729c399ab994623668e3492fe81e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "892fe8cedab8b23b53a7317be898f57590f6a6e8ac867decf525f2d15dcaf3d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:30",
        "version": {
          "withMetadata": "603dfa020e37b26ac4781d9ace8a4845d7e726a8b0de033d9654c1cedaf228b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)2159_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)2159_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)2159_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "9fd5c012913482a4c7572fa5150d2e409592841746bf7a9877aafac14990da0f",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "cf12f4c6eb90cc8cd40bff717d660fa4657bda5f1124651818b894f0e5f98004",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "060449c202141abfa2cc3189b4cbdf603f6ebabec45fd09f78b0e879c04d4561",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f19914d1858410a6b1ad6138dfb5b0d987af13bf7b3fa3d8d743981e230c206e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:19",
        "version": {
          "withMetadata": "ce77a4555cb8fb88e6ffe65233840ed7ccfe0f97c19b51405217733adefff8c8",
          "withoutMetadata": "ec421c2db88ef816af94e709d7b6e36809f19988fc50474088ff21be01424236",
          "linkedWithoutMetadata": "ec421c2db88ef816af94e709d7b6e36809f19988fc50474088ff21be01424236"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingRewardToken(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "CRP",
              "type": "t_contract(IBEP20)8698",
              "src": "contracts/LoserPredictionPool.sol:50"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardToken",
              "type": "t_contract(IBEP20)8698",
              "src": "contracts/LoserPredictionPool.sol:52"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8943",
              "src": "contracts/LoserPredictionPool.sol:54"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardTokenPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:56"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:58"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7490",
              "src": "contracts/LoserPredictionPool.sol:60"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4121_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:64"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4110_storage))",
              "src": "contracts/LoserPredictionPool.sol:66"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:68"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:70"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:72"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/LoserPredictionPool.sol:74"
            }
          ],
          "types": {
            "t_contract(IBEP20)8698": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8943": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7490": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)4121_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)4121_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardTokenPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4110_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4110_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)4110_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:19",
        "version": {
          "withMetadata": "6f8e44502d0056ff4b8b9c1203b5c59ecb7e38682606f00dff3b945c66061164",
          "withoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e",
          "linkedWithoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[])",
          "removeTokens(uint256[],address[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound(address[],int256[])",
          "endRound(address[],int256[])",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "crp",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/Prediction.sol:28"
            },
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:31"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:32"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:34"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:35"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:36"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:38"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:39"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:40"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:42"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5315_storage))",
              "src": "contracts/Prediction.sol:46"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)5305_storage)",
              "src": "contracts/Prediction.sol:47"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:48"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_struct(AddressSet)1852_storage",
              "src": "contracts/Prediction.sol:50"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5315_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)5315_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)5315_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)5274"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)5274": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)5305_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)5305_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_struct(AddressSet)1852_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1551_storage"
                }
              ]
            },
            "t_struct(Set)1551_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "4e4fd4d13103f2803542008c8a5f5f058d5da1953f3a31ef6f83394ce7fb87f6",
          "withoutMetadata": "bec36d2d3d32e94678d0ddd4ab913ab4fcb6c0d0d64b651ffb81cd5c72c75a2e",
          "linkedWithoutMetadata": "bec36d2d3d32e94678d0ddd4ab913ab4fcb6c0d0d64b651ffb81cd5c72c75a2e"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safeCRPTransfer(address,uint256)",
          "safeCROTransfer(address,uint256)",
          "safeTokenTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "CRP",
              "type": "t_contract(IBEP20)8698",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)8698": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CRP": {
        "src": "contracts/Tokens.sol:7",
        "version": {
          "withMetadata": "ead88412db408301ae2d9dac7cf51db81124f6fb71dac876fc9421ce0e79848b",
          "withoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18",
          "linkedWithoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CRP",
            "src": "contracts/Tokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MFF": {
        "src": "contracts/Tokens.sol:13",
        "version": {
          "withMetadata": "776341aecdb9608a4423addd9d15ed1517289f910b5bafee0f274f971b917a53",
          "withoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d",
          "linkedWithoutMetadata": "4ff9b4be69f1fa3f72feb8651d26035c1c4e90de63031c6bda540651ab2f6b1d"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MFF",
            "src": "contracts/Tokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:17",
        "version": {
          "withMetadata": "4ca16ef0f12dc12f4817acc0f576f9119b20f63098524514ca2829278aef4dcc",
          "withoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1",
          "linkedWithoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingCRP(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "CRP",
              "type": "t_contract(IBEP20)8698",
              "src": "contracts/WinnerPredictionPool.sol:48"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8943",
              "src": "contracts/WinnerPredictionPool.sol:50"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "CRPPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:52"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:54"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7490",
              "src": "contracts/WinnerPredictionPool.sol:56"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7565_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:60"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7554_storage))",
              "src": "contracts/WinnerPredictionPool.sol:62"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:64"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:66"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:68"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/WinnerPredictionPool.sol:70"
            }
          ],
          "types": {
            "t_contract(IBEP20)8698": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8943": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7490": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7565_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7565_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accCRPPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7554_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7554_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7554_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "1715adc038d9cc729f29eee02b8c2dfb6a4e5405c8dfccecd929830b53de6d20",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "892fe8cedab8b23b53a7317be898f57590f6a6e8ac867decf525f2d15dcaf3d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:19",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:215"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:21",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:81"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:97"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "07fea4fdd6df2d6cd2d981af17da11cae127727e4bc3140f2e8a42ed4cab4388",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "6ff2d281c8895883bc649d59b71ea044eb753d4d256f0c9d8973607880b970d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "b344c9fa062dea2441dbb386373fd0faa7eb4d113287932d99228fd25e9963e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSetUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol:30",
        "version": {
          "withMetadata": "603dfa020e37b26ac4781d9ace8a4845d7e726a8b0de033d9654c1cedaf228b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)2159_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)2159_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)2159_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "9fd5c012913482a4c7572fa5150d2e409592841746bf7a9877aafac14990da0f",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "cf12f4c6eb90cc8cd40bff717d660fa4657bda5f1124651818b894f0e5f98004",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "060449c202141abfa2cc3189b4cbdf603f6ebabec45fd09f78b0e879c04d4561",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f19914d1858410a6b1ad6138dfb5b0d987af13bf7b3fa3d8d743981e230c206e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CRP": {
        "src": "contracts/CRP.sol:7",
        "version": {
          "withMetadata": "a7dc1ccdac8389b34a3338ac744457b576e333e673acfaa39868ecaf9c1a8ed3",
          "withoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18",
          "linkedWithoutMetadata": "3a9b84e54b63a0f62efae5195f1fc6ee85fb20df1ebbdb65b2cb4f8f977cbd18"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CRP",
            "src": "contracts/CRP.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken1": {
        "src": "contracts/LPTokens.sol:7",
        "version": {
          "withMetadata": "3637de04eeee1b34024bba33f1e050c09b811ca20856829f5e0773bae28e8a93",
          "withoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98",
          "linkedWithoutMetadata": "dfdd93f915476d236e60d081f4963571a91b7f10cd7da232aa972d35cb375a98"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken1",
            "src": "contracts/LPTokens.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPToken2": {
        "src": "contracts/LPTokens.sol:13",
        "version": {
          "withMetadata": "b431bef4fbcfabaa8dd0b8374fa0d364dd868c0678e81b83374dcc202ea3e6d1",
          "withoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9",
          "linkedWithoutMetadata": "a27c071e308d5990dde967c360e5c7c4c0c2f648ae306907cc86df4a0f213dd9"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken2",
            "src": "contracts/LPTokens.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LoserPredictionPool": {
        "src": "contracts/LoserPredictionPool.sol:19",
        "version": {
          "withMetadata": "ce77a4555cb8fb88e6ffe65233840ed7ccfe0f97c19b51405217733adefff8c8",
          "withoutMetadata": "ec421c2db88ef816af94e709d7b6e36809f19988fc50474088ff21be01424236",
          "linkedWithoutMetadata": "ec421c2db88ef816af94e709d7b6e36809f19988fc50474088ff21be01424236"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingRewardToken(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LoserPredictionPool",
              "label": "CRP",
              "type": "t_contract(IBEP20)8716",
              "src": "contracts/LoserPredictionPool.sol:50"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardToken",
              "type": "t_contract(IBEP20)8716",
              "src": "contracts/LoserPredictionPool.sol:52"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8961",
              "src": "contracts/LoserPredictionPool.sol:54"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "rewardTokenPerBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:56"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:58"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7542",
              "src": "contracts/LoserPredictionPool.sol:60"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:61"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4173_storage)dyn_storage",
              "src": "contracts/LoserPredictionPool.sol:64"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4162_storage))",
              "src": "contracts/LoserPredictionPool.sol:66"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:68"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:70"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/LoserPredictionPool.sol:72"
            },
            {
              "contract": "LoserPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/LoserPredictionPool.sol:74"
            }
          ],
          "types": {
            "t_contract(IBEP20)8716": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8961": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7542": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)4173_storage)dyn_storage": {
              "label": "struct LoserPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)4173_storage": {
              "label": "struct LoserPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardTokenPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4162_storage))": {
              "label": "mapping(uint256 => mapping(address => struct LoserPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4162_storage)": {
              "label": "mapping(address => struct LoserPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)4162_storage": {
              "label": "struct LoserPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Prediction": {
        "src": "contracts/Prediction.sol:19",
        "version": {
          "withMetadata": "6f8e44502d0056ff4b8b9c1203b5c59ecb7e38682606f00dff3b945c66061164",
          "withoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e",
          "linkedWithoutMetadata": "3707d6f7e7a74379758e88a5edcc80a88294296f3094d6bb5803e222dd23a54e"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "ReentrancyGuardUpgradeable",
          "PausableUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "EnumerableSetUpgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "addTokens(address[])",
          "removeTokens(uint256[],address[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound(address[],int256[])",
          "endRound(address[],int256[])",
          "pause()",
          "claimTreasury()",
          "unpause()",
          "setBufferBetAndIntervalSeconds(uint256,uint256,uint256)",
          "setBetAmount(uint256)",
          "setOperator(address)",
          "setTokenMaxBet(uint256)",
          "recoverToken(address,uint256)",
          "setAdmin(address)",
          "getRound(uint256)",
          "getStats(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Prediction",
              "label": "crp",
              "type": "t_contract(IERC20Upgradeable)967",
              "src": "contracts/Prediction.sol:28"
            },
            {
              "contract": "Prediction",
              "label": "adminAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:31"
            },
            {
              "contract": "Prediction",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/Prediction.sol:32"
            },
            {
              "contract": "Prediction",
              "label": "bufferSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:34"
            },
            {
              "contract": "Prediction",
              "label": "intervalSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:35"
            },
            {
              "contract": "Prediction",
              "label": "betSeconds",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:36"
            },
            {
              "contract": "Prediction",
              "label": "betAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:38"
            },
            {
              "contract": "Prediction",
              "label": "treasuryAmount",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:39"
            },
            {
              "contract": "Prediction",
              "label": "tokenMaxBet",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:40"
            },
            {
              "contract": "Prediction",
              "label": "currentEpoch",
              "type": "t_uint256",
              "src": "contracts/Prediction.sol:42"
            },
            {
              "contract": "Prediction",
              "label": "ledger",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5367_storage))",
              "src": "contracts/Prediction.sol:46"
            },
            {
              "contract": "Prediction",
              "label": "rounds",
              "type": "t_mapping(t_uint256,t_struct(Round)5357_storage)",
              "src": "contracts/Prediction.sol:47"
            },
            {
              "contract": "Prediction",
              "label": "userRounds",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts/Prediction.sol:48"
            },
            {
              "contract": "Prediction",
              "label": "tokens",
              "type": "t_struct(AddressSet)1852_storage",
              "src": "contracts/Prediction.sol:50"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)967": {
              "label": "contract IERC20Upgradeable"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(BetInfo)5367_storage))": {
              "label": "mapping(uint256 => mapping(address => struct Prediction.BetInfo))"
            },
            "t_mapping(t_address,t_struct(BetInfo)5367_storage)": {
              "label": "mapping(address => struct Prediction.BetInfo)"
            },
            "t_struct(BetInfo)5367_storage": {
              "label": "struct Prediction.BetInfo",
              "members": [
                {
                  "label": "position",
                  "type": "t_enum(Position)5326"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "claimed",
                  "type": "t_bool"
                }
              ]
            },
            "t_enum(Position)5326": {
              "label": "enum Prediction.Position",
              "members": [
                "Bull",
                "Bear"
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_struct(Round)5357_storage)": {
              "label": "mapping(uint256 => struct Prediction.Round)"
            },
            "t_struct(Round)5357_storage": {
              "label": "struct Prediction.Round",
              "members": [
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "closeTimestamp",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "oraclesCalled",
                  "type": "t_bool"
                },
                {
                  "label": "bets",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bulls",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "bears",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "lockedPrices",
                  "type": "t_mapping(t_address,t_int256)"
                },
                {
                  "label": "closePrices",
                  "type": "t_mapping(t_address,t_int256)"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_int256)": {
              "label": "mapping(address => int256)"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_struct(AddressSet)1852_storage": {
              "label": "struct EnumerableSetUpgradeable.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1551_storage"
                }
              ]
            },
            "t_struct(Set)1551_storage": {
              "label": "struct EnumerableSetUpgradeable.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PredictionWallet": {
        "src": "contracts/PredictionWallet.sol:9",
        "version": {
          "withMetadata": "4e4fd4d13103f2803542008c8a5f5f058d5da1953f3a31ef6f83394ce7fb87f6",
          "withoutMetadata": "bec36d2d3d32e94678d0ddd4ab913ab4fcb6c0d0d64b651ffb81cd5c72c75a2e",
          "linkedWithoutMetadata": "bec36d2d3d32e94678d0ddd4ab913ab4fcb6c0d0d64b651ffb81cd5c72c75a2e"
        },
        "inherit": [
          "ReentrancyGuard",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "SafeBEP20"
        ],
        "methods": [
          "(address)",
          "safeCRPTransfer(address,uint256)",
          "safeCROTransfer(address,uint256)",
          "safeTokenTransfer(address,address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PredictionWallet",
            "src": "contracts/PredictionWallet.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PredictionWallet",
              "label": "CRP",
              "type": "t_contract(IBEP20)8716",
              "src": "contracts/PredictionWallet.sol:12"
            }
          ],
          "types": {
            "t_contract(IBEP20)8716": {
              "label": "contract IBEP20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WinnerPredictionPool": {
        "src": "contracts/WinnerPredictionPool.sol:17",
        "version": {
          "withMetadata": "4ca16ef0f12dc12f4817acc0f576f9119b20f63098524514ca2829278aef4dcc",
          "withoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1",
          "linkedWithoutMetadata": "a1df1c7dd8b9ec1b34aa0f30b2941847ddcf390120078e82ca85336b47ee6eb1"
        },
        "inherit": [
          "OwnableUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "initialize(address,address,uint256,uint256,uint256,address,address)",
          "updateMultiplier(uint256)",
          "poolLength()",
          "add(uint256)",
          "setPoolAllocPoint(uint256)",
          "setAllocPoint(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingCRP(uint256,address)",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setMaxCRPDeposit(uint256)",
          "setOperator(address)",
          "getPoolLength()",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WinnerPredictionPool",
              "label": "CRP",
              "type": "t_contract(IBEP20)8716",
              "src": "contracts/WinnerPredictionPool.sol:48"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "prediction",
              "type": "t_contract(IPrediction)8961",
              "src": "contracts/WinnerPredictionPool.sol:50"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "CRPPerBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:52"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "BONUS_MULTIPLIER",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:54"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "wallet",
              "type": "t_contract(PredictionWallet)7542",
              "src": "contracts/WinnerPredictionPool.sol:56"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "maxCRPDeposit",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:57"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)7583_storage)dyn_storage",
              "src": "contracts/WinnerPredictionPool.sol:60"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7572_storage))",
              "src": "contracts/WinnerPredictionPool.sol:62"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "allocPoint",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:64"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:66"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "totalRewardDebt",
              "type": "t_uint256",
              "src": "contracts/WinnerPredictionPool.sol:68"
            },
            {
              "contract": "WinnerPredictionPool",
              "label": "operatorAddress",
              "type": "t_address",
              "src": "contracts/WinnerPredictionPool.sol:70"
            }
          ],
          "types": {
            "t_contract(IBEP20)8716": {
              "label": "contract IBEP20"
            },
            "t_contract(IPrediction)8961": {
              "label": "contract IPrediction"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(PredictionWallet)7542": {
              "label": "contract PredictionWallet"
            },
            "t_array(t_struct(PoolInfo)7583_storage)dyn_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo[]"
            },
            "t_struct(PoolInfo)7583_storage": {
              "label": "struct WinnerPredictionPool.PoolInfo",
              "members": [
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accCRPPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "epoch",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7572_storage))": {
              "label": "mapping(uint256 => mapping(address => struct WinnerPredictionPool.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)7572_storage)": {
              "label": "mapping(address => struct WinnerPredictionPool.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)7572_storage": {
              "label": "struct WinnerPredictionPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts/interfaces/IBEP20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorV3Interface": {
        "src": "contracts/interfaces/IPrediction.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrediction": {
        "src": "contracts/interfaces/IPrediction.sol:59",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addTokens(address[],address[])",
          "removeTokens(uint256[])",
          "getTokens()",
          "predictBear(uint256,address)",
          "predictBull(uint256,address)",
          "claim(uint256[])",
          "startRound()",
          "endRound()",
          "getRound(uint256)",
          "getUserRounds(address,uint256,uint256)",
          "currentEpoch()",
          "getUserRoundsLength(address)",
          "refundable(uint256,address)",
          "wonRound(address,uint256)",
          "lostRound(address,uint256)",
          "ledger(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeBEP20": {
        "src": "contracts/utils/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "1715adc038d9cc729f29eee02b8c2dfb6a4e5405c8dfccecd929830b53de6d20",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "892fe8cedab8b23b53a7317be898f57590f6a6e8ac867decf525f2d15dcaf3d0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}